{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAO,CACXC,KAAMC,SAASC,cAAc,UAGzBC,EAAW,GAiCjB,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,S,GAEpBA,E,IAzCPP,EAAKC,KAAKc,iBAAiB,UAAU,SAAAC,GACnCZ,EAASY,EAAEC,OAAOC,MAAQF,EAAEC,OAAOE,K,IAGrCnB,EAAKC,KAAKc,iBAAiB,UAE3B,SAAsBC,GACpBA,EAAEI,iBAMF,IAJA,IAAMC,EAAaC,OAAOlB,EAASG,OAC7BgB,EAAYD,OAAOlB,EAASoB,MAC5BC,EAASH,OAAOlB,EAASqB,QAEtBC,EAAI,EAAGA,EAAID,EAAQC,GAAK,EAC/BrB,EAAcqB,EAAI,EAAGA,EAAIH,EAAYF,GAClCM,MAAK,SAAAC,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAEjBsB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCC,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAGjD0B,OAAM,SAAAL,G,IAAGtB,EAAQsB,EAARtB,SAAUC,EAAKqB,EAALrB,MAElBsB,EAAA/B,GAASgC,OAAOI,QACd,sBAAqCF,OAAf1B,EAAS,QAAY0B,OAANzB,EAAM,M,IAInDS,EAAEC,OAAOkB,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix, { Loading } from 'notiflix';\nimport 'notiflix/dist/notiflix-3.2.5.min.css';\nconst refs = {\n  form: document.querySelector('.form'),\n};\n\nconst formData = {};\n\nrefs.form.addEventListener('change', e => {\n  formData[e.target.name] = e.target.value;\n});\n\nrefs.form.addEventListener('submit', onSubmitForm);\n\nfunction onSubmitForm(e) {\n  e.preventDefault();\n\n  const firstDelay = Number(formData.delay);\n  const delayStep = Number(formData.step);\n  const amount = Number(formData.amount);\n\n  for (let i = 0; i < amount; i += 1) {\n    createPromise(i + 1, i * delayStep + firstDelay)\n      .then(({ position, delay }) => {\n        // console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        // console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n  }\n  e.target.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$refs","form","document","querySelector","$ce04d3a99e08e73b$var$formData","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener","e","target","name","value","preventDefault","firstDelay","Number","delayStep","step","amount","i","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","reset"],"version":3,"file":"03-promises.00a8e047.js.map"}